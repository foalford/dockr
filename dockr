#!/bin/bash

# notes:
# use backslash before commonly aliased commands

set -ex

# DOCKER_DNS is the local DNS (dnsmasq). 
# Default value is local IP address 
DOCKER_DNS=${DOCKER_DNS:=$(ip route get 8.8.8.8 | awk 'NR==1 {print $NF}')}

# Extra Docker options
DOCKER_OPT=${DOCKER_OPT:=''}

CUR=$(pwd)

DEV_CONF_PATTERN="*.dev.conf"
DB_CONTAINER=mysql-ohy

case "$1" in

# Attach to a running container, turn signal proxy off by default
attach)
    docker attach --sig-proxy=false $2
    ;;

sw)
    shift
    DOCKER_OPT="$DOCKER_OPT -v $CUR:/var/www/html/"
    if [[ -d "$CUR/config/nginx" ]]; then 
        NGINX_CONF=$(ls -1 $CUR/config/nginx/$DEV_CONF_PATTERN 2>/dev/null)
        for i in $NGINX_CONF; do
            echo ${i##*/}
            DOCKER_OPT="$DOCKER_OPT -v $i:/etc/nginx/sites-enabled/${i##*/}"
        done
    fi
    DOCKER_OPT="$DOCKER_OPT -p 2200:22 -p=80:80 -p=443:443"

    id=$(docker ps | grep "\->80" | cut -d' ' -f1)
    if [[ -n $id  ]]; then
        echo -e "nginx docker($id) is running, stopping it";
        docker stop $id
    fi;

    docker run --dns=$DOCKER_DNS $DOCKER_OPT -d  $@
    ;;

# Log into a image and throw away the container
#
# dummy entrypoint so we can open a terminal on entrypoint images
bash)
    length=$(($#))
    params=${@:2:$length}
    docker run --rm --entrypoint='sudo' --interactive --tty $params /bin/bash
    ;;

# Delete all untagged containers
clean)
    docker rm $(docker ps -a | tail -n+2 | awk '{print $1"\t"$2'} | \grep -v ':' | cut -f1)
    ;;

# Delete all untagged images
cleani)
    docker rmi $(docker images --quiet --filter dangling=true)
    ;;

# List images, filtering out untagged images
images)
    docker images | \grep -v ^\<
    ;;

# Get the IP address of a running container
ip)
    docker inspect --format '{{.NetworkSettings.IPAddress}}' $2
    ;;

# Get just the port number for a NAT-ed port
prt)
    docker port ${@:2:$#} | cut -d : -f 2
    ;;

# Delete the latest container
oops)
    # http://stackoverflow.com/questions/3231804/in-bash-how-to-add-are-you-sure-y-n-to-any-command-or-alias
    docker ps -l
    read -r -p "Are you sure? [y/N] " response
    response=${response,,}    # tolower
    if [[ $response =~ ^(yes|y)$ ]]; then
        docker rm -f $(docker ps -l -q)
    else
        echo 'Nevermind then'
    fi
    ;;

# Stop and remove a running container
# I may just wrap `rm` and stop running containers
smite)
    echo "Stopping and then removing $2"
    docker stop $2
    docker rm $2
    ;;

# Stop all running containers
stopall)
    docker stop $(docker ps -q)
    ;;

# Anything else you try gets passed directly to `docker`
*)
    docker $@
    ;;

esac
